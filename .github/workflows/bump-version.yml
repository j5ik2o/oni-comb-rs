name: Bump Version
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
jobs:
  bump-version:
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: parser
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-edit
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install semver
      - name: Calculate changes from the latest tag to HEAD
        id: changes
        run: |
          TAG_LIST=$(git tag -l --sort=-taggerdate)
          echo $TAG_LIST
          LATEST_TAG=$(echo $TAG_LIST | grep parser | head -n 1)
          echo "latest-tag = $LATEST_TAG"
          COUNT=$(git log $LATEST_TAG..HEAD --pretty=format:"%s" --no-merges -P --grep='^(build|ci|feat|fix|docs|style|refactor|perf|test|revert|chore)(\(.*\))?:' -- "$TARGET_DIR/*" | awk 'END{print NR}')
          echo "steps.changes.outputs.count = $COUNT"
          echo "::set-output name=count::$COUNT"
      - name: Get the next version
        id: version
        run: |
          LATEST_TAG=$(git tag -l --sort=-taggerdate | grep $TARGET_DIR | head -n 1)
          NEXT_VERSION=$(echo $LATEST_TAG | python3 "${GITHUB_WORKSPACE}"/.github/next_semver.py)
          echo "NEXT_VERSION=$NEXT_VERSION"
          echo "::set-output name=prev_version::$LATEST_TAG"
          echo "::set-output name=version::$NEXT_VERSION"
        if: steps.changes.outputs.count > 0
      - run: cargo set-version -p oni-comb-$TARGET_DIR-rs ${{ steps.version.outputs.version }}
        if: steps.changes.outputs.count > 0
      - name: git commit & tag & push
        id: git_commit_push
        run: |
          git config --global user.email "j5ik2o@gmail.com"
          git config --global user.name "Junichi Kato"
          git diff
          git add .
          git commit -m "$TARGET_DIR's version up to ${{ steps.version.outputs.version }}"
          git push origin main
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "::set-output name=commit_sha::$COMMIT_SHA"
        if: steps.changes.outputs.count > 0
      - name: Bump version and push tag
        id: tag_version
        run: |
          git tag -a "oni-comb-$TARGET_DIR-rs-v${{ steps.version.outputs.version }}" ${{ steps.git_commit_push.outputs.commit_sha }} -m "oni-comb-$TARGET_DIR-rs-v${{ steps.version.outputs.version }}"
          git push origin "oni-comb-$TARGET_DIR-rs-v${{ steps.version.outputs.version }}"
          git log ${{ steps.version.outputs.prev_version }}..oni-comb-$TARGET_DIR-rs-v${{ steps.version.outputs.version }} --pretty=format:"%h%x09%H%x09%s" \
            -P --grep='^(build|ci|feat|fix|docs|style|refactor|perf|test|revert|chore)(.*)?:.*$' \
            --no-merges --full-history -- "$TARGET_DIR/*" | python3 "${GITHUB_WORKSPACE}"/.github/create-release-note.py > changelog.txt
        if: steps.changes.outputs.count > 0
      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: oni-comb-$TARGET_DIR-rs-v${{ steps.version.outputs.version }}
          release_name: Release oni-comb-$TARGET_DIR-rs-v${{ steps.version.outputs.version }}
          body_path: changelog.txt
        if: steps.changes.outputs.count > 0